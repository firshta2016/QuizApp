{"version":3,"sources":["components/QuestionCard.tsx","API.tsx","utils.ts","components/Books.tsx","components/Movies.tsx","components/Sports.tsx","components/Computers.tsx","components/HomePage.tsx","App.tsx","index.tsx"],"names":["Difficulty","QuestionCard","props","StyleWrapper","className","questionNum","totalQuestions","dangerouslySetInnerHTML","__html","question","answers","map","answer","key","disabled","userAnswer","value","onClick","callback","styled","div","shuffleArray","array","sort","Math","random","fetchBooks","amount","difficulty","a","fetch","json","data","results","incorrect_answers","correct_answer","fetchMovies","fetchSports","fetchComputers","Books","React","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","history","useHistory","startTrivia","EASY","newQuestions","length","undefined","e","currentTarget","correct","prev","answerObject","correctAnswer","TOTAL_QUESTIONS","nextQuestion","goBack","Movies","Sports","Computers","Routes","HomePage","type","push","App","exact","path","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6ba5c800.chunk.js","sourcesContent":["import * as React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nexport interface IProps {\r\n    question: string;\r\n    answers: string[];\r\n    callback: (e: React.MouseEvent<HTMLButtonElement>) => void;\r\n    userAnswer: any;\r\n    questionNum: number;\r\n    totalQuestions: number;\r\n}\r\nexport const QuestionCard = (props: IProps) => {\r\n    return (\r\n        <StyleWrapper>\r\n            <p className=\"number\">\r\n                Question: {props.questionNum} / {props.totalQuestions}\r\n            </p>\r\n            <p dangerouslySetInnerHTML={{ __html: props.question }} />\r\n            <div>\r\n                {props.answers && props.answers.map(answer => (\r\n                    <div className=\"answerQuestions\" key={answer}>\r\n                        <button disabled={props.userAnswer} value={answer} onClick={props.callback}>\r\n                            <span dangerouslySetInnerHTML={{ __html: answer }} />\r\n                        </button>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        </StyleWrapper>\r\n    );\r\n};\r\n\r\nconst StyleWrapper = styled.div`\r\n    .answerQuestions {\r\n        cursor: pointer;\r\n        user-select: none;\r\n        font-size: 0.8rem;\r\n        width: 100%;\r\n        height: 40px;\r\n        margin: 5px 0;\r\n        background: linear-gradient(90deg, #56ccff, #6eafb4);\r\n        border: 3px solid #fff;\r\n        box-shadow: 1px 2px 0px rgba(0,0,0,0.1);\r\n        border-radius: 10px;\r\n        color: #fff;\r\n        text-shadow: 0px 1px 0px rgba(0,0,0,0.25); \r\n    }\r\n\r\n    button, input, select, textarea {\r\n        background: transparent;\r\n        color: #2f3542;\r\n        font-size: x-large;\r\n        border: none;\r\n    }\r\n`;","import { shuffleArray } from './utils';\r\n\r\nexport type Question = {\r\n  category: string;\r\n  correct_answer: string;\r\n  difficulty: string;\r\n  incorrect_answers: string[];\r\n  question: string;\r\n  type: string;\r\n};\r\n\r\nexport enum Difficulty {\r\n  EASY = \"easy\",\r\n  MEDIUM = \"medium\",\r\n  HARD = \"hard\",\r\n}\r\n\r\nexport type QuestionsState = Question & { answers: string[] };\r\n\r\nexport const fetchBooks = async (amount: number, difficulty: Difficulty): Promise<QuestionsState[]> => {\r\n  //const endpoint = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=multiple`;\r\n  const endpoint = `https://opentdb.com/api.php?amount=10&category=10`;\r\n  const data = await (await fetch(endpoint)).json();\r\n  return data.results.map((question: Question) => ({\r\n    ...question,\r\n    answers: shuffleArray([...question.incorrect_answers, question.correct_answer])\r\n  }))\r\n};\r\n\r\nexport const fetchMovies = async (amount: number, difficulty: Difficulty): Promise<QuestionsState[]> => {\r\n  //const endpoint = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=multiple`;\r\n  const endpoint = 'https://opentdb.com/api.php?amount=10&category=11'\r\n  const data = await (await fetch(endpoint)).json();\r\n  return data.results.map((question: Question) => ({\r\n    ...question,\r\n    answers: shuffleArray([...question.incorrect_answers, question.correct_answer])\r\n  }))\r\n};\r\n\r\nexport const fetchSports = async (amount: number, difficulty: Difficulty): Promise<QuestionsState[]> => {\r\n  //const endpoint = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=multiple`;\r\n  const endpoint = 'https://opentdb.com/api.php?amount=10&category=21'\r\n  const data = await (await fetch(endpoint)).json();\r\n  return data.results.map((question: Question) => ({\r\n    ...question,\r\n    answers: shuffleArray([...question.incorrect_answers, question.correct_answer])\r\n  }))\r\n};\r\n\r\nexport const fetchComputers = async (amount: number, difficulty: Difficulty): Promise<QuestionsState[]> => {\r\n  //const endpoint = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=multiple`;\r\n  const endpoint = 'https://opentdb.com/api.php?amount=10&category=18'\r\n  const data = await (await fetch(endpoint)).json();\r\n  return data.results.map((question: Question) => ({\r\n    ...question,\r\n    answers: shuffleArray([...question.incorrect_answers, question.correct_answer])\r\n  }))\r\n};","export const shuffleArray = (array: any[]) => \r\n    [...array].sort(() => Math.random() - 0.5);\r\n","import * as React from 'react';\r\nimport styled from 'styled-components';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { QuestionCard } from './QuestionCard';\r\nimport { fetchBooks } from '../API';\r\n//types\r\nimport { QuestionsState, Difficulty } from '../API';\r\n\r\nconst TOTAL_QUESTIONS = 10;\r\n\r\nexport interface IAnswerObject {\r\n    question: string;\r\n    answer: string;\r\n    correct: boolean;\r\n    correctAnswer: string;\r\n}\r\n\r\nexport const Books = () => {\r\n    const [ loading, setLoading ] = React.useState(false);\r\n    const [ questions, setQuestions ] = React.useState<QuestionsState[]>([]);\r\n    const [ number, setNumber ] = React.useState(0);\r\n    const [ userAnswers, setUserAnswers ] = React.useState<IAnswerObject[]>([]);\r\n    const [ score, setScore ] = React.useState(0);\r\n    const [ gameOver, setGameOver ] = React.useState(true);\r\n      \r\n    const history = useHistory();\r\n\r\n    const startTrivia = async () => {\r\n        setLoading(true);\r\n        setGameOver(false);\r\n\r\n        const newQuestions = await fetchBooks(\r\n            TOTAL_QUESTIONS,\r\n            Difficulty.EASY\r\n        );\r\n\r\n        setQuestions(newQuestions);\r\n        setScore(0);\r\n        setUserAnswers([]);\r\n        setNumber(0);\r\n        setLoading(false);\r\n    }\r\n\r\n    const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\r\n        if (!gameOver) {\r\n            const answer = e.currentTarget.value;\r\n            //check anwer against correct asswer\r\n            const correct = questions[number].correct_answer === answer;\r\n            if (correct) setScore(prev => prev + 1)\r\n            //save answer in the array for the user answers\r\n            const answerObject = {\r\n                question: questions[number].question,\r\n                answer,\r\n                correct,\r\n                correctAnswer: questions[number].correct_answer\r\n            };\r\n            setUserAnswers((prev) => [...prev, answerObject])\r\n        }\r\n    }\r\n\r\n    const nextQuestion = () => {\r\n        const nextQuestion = number + 1;\r\n        //if we are on the last question\r\n        if (nextQuestion === TOTAL_QUESTIONS) {\r\n            //game is over\r\n            setGameOver(true);\r\n        } else {\r\n            setNumber(nextQuestion);\r\n        }\r\n    }\r\n\r\n    return (\r\n       \r\n            <div className=\"container\">\r\n                { gameOver || userAnswers.length === TOTAL_QUESTIONS ? (\r\n                <button className=\"start\" onClick={startTrivia}>Start</button>\r\n                ) : null }\r\n                \r\n                { !gameOver ? <p className=\"score\">Score: {score} </p> : null }\r\n                { loading && <p>Loading Questions ...</p> } \r\n                { !loading && !gameOver && (\r\n                    <QuestionCard \r\n                    questionNum={number + 1}\r\n                    totalQuestions={TOTAL_QUESTIONS}\r\n                    question={questions[number].question}\r\n                    answers = {questions[number].answers}\r\n                    userAnswer = {userAnswers ? userAnswers[number] : undefined}\r\n                    callback={checkAnswer}\r\n                />\r\n                )}\r\n                {!gameOver && \r\n                !loading && \r\n                userAnswers.length === number + 1 && \r\n                number !== TOTAL_QUESTIONS - 1 ? ( \r\n                <button className=\"next\" onClick={nextQuestion}>\r\n                    Next Question\r\n                </button>\r\n                ) : null}\r\n               \r\n            <div className=\"back-button\">\r\n                <button onClick={() => history.goBack()}>Home Page</button>\r\n            </div> \r\n        </div>\r\n    );\r\n};\r\n\r\n\r\n\r\n","import * as React from 'react';\r\nimport styled from 'styled-components';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { QuestionCard } from './QuestionCard';\r\nimport { fetchMovies } from '../API';\r\nimport { QuestionsState, Difficulty } from '../API';\r\n\r\nconst TOTAL_QUESTIONS = 10;\r\n\r\nexport interface IAnswerObject {\r\n    question: string;\r\n    answer: string;\r\n    correct: boolean;\r\n    correctAnswer: string;\r\n}\r\n\r\nexport const Movies = () => {\r\n    const [ loading, setLoading ] = React.useState(false);\r\n    const [ questions, setQuestions ] = React.useState<QuestionsState[]>([]);\r\n    const [ number, setNumber ] = React.useState(0);\r\n    const [ userAnswers, setUserAnswers ] = React.useState<IAnswerObject[]>([]);\r\n    const [ score, setScore ] = React.useState(0);\r\n    const [ gameOver, setGameOver ] = React.useState(true);\r\n      \r\n    const history = useHistory();\r\n\r\n    const startTrivia = async () => {\r\n        setLoading(true);\r\n        setGameOver(false);\r\n\r\n        const newQuestions = await fetchMovies(\r\n            TOTAL_QUESTIONS,\r\n            Difficulty.EASY\r\n        );\r\n\r\n        setQuestions(newQuestions);\r\n        setScore(0);\r\n        setUserAnswers([]);\r\n        setNumber(0);\r\n        setLoading(false);\r\n    }\r\n\r\n    const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\r\n        if (!gameOver) {\r\n            const answer = e.currentTarget.value;\r\n            //check anwer against correct asswer\r\n            const correct = questions[number].correct_answer === answer;\r\n            if (correct) setScore(prev => prev + 1)\r\n            //save answer in the array for the user answers\r\n            const answerObject = {\r\n                question: questions[number].question,\r\n                answer,\r\n                correct,\r\n                correctAnswer: questions[number].correct_answer\r\n            };\r\n            setUserAnswers((prev) => [...prev, answerObject])\r\n        }\r\n    }\r\n\r\n    const nextQuestion = () => {\r\n        const nextQuestion = number + 1;\r\n        //if we are on the last question\r\n        if (nextQuestion === TOTAL_QUESTIONS) {\r\n            //game is over\r\n            setGameOver(true);\r\n        } else {\r\n            setNumber(nextQuestion);\r\n        }\r\n    }\r\n\r\n    return (\r\n       \r\n            <div className=\"container\">\r\n                { gameOver || userAnswers.length === TOTAL_QUESTIONS ? (\r\n                <button className=\"start\" onClick={startTrivia}>Start</button>\r\n                ) : null }\r\n                \r\n                { !gameOver ? <p className=\"score\">Score: {score} </p> : null }\r\n                { loading && <p>Loading Questions ...</p> } \r\n                { !loading && !gameOver && (\r\n                    <QuestionCard \r\n                    questionNum={number + 1}\r\n                    totalQuestions={TOTAL_QUESTIONS}\r\n                    question={questions[number].question}\r\n                    answers = {questions[number].answers}\r\n                    userAnswer = {userAnswers ? userAnswers[number] : undefined}\r\n                    callback={checkAnswer}\r\n                />\r\n                )}\r\n                {!gameOver && \r\n                !loading && \r\n                userAnswers.length === number + 1 && \r\n                number !== TOTAL_QUESTIONS - 1 ? ( \r\n                <button className=\"next\" onClick={nextQuestion}>\r\n                    Next Question\r\n                </button>\r\n                ) : null}\r\n               \r\n            <div className=\"back-button\">\r\n                <button onClick={() => history.goBack()}>Home Page</button>\r\n            </div> \r\n        </div>\r\n        \r\n        \r\n    );\r\n};\r\n\r\n\r\n\r\n","import * as React from 'react';\r\nimport styled from 'styled-components';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { QuestionCard } from './QuestionCard';\r\nimport { fetchSports } from '../API';\r\n//types\r\nimport { QuestionsState, Difficulty } from '../API';\r\n\r\nconst TOTAL_QUESTIONS = 10;\r\n\r\nexport interface IAnswerObject {\r\n    question: string;\r\n    answer: string;\r\n    correct: boolean;\r\n    correctAnswer: string;\r\n}\r\n\r\nexport const Sports = () => {\r\n    const [ loading, setLoading ] = React.useState(false);\r\n    const [ questions, setQuestions ] = React.useState<QuestionsState[]>([]);\r\n    const [ number, setNumber ] = React.useState(0);\r\n    const [ userAnswers, setUserAnswers ] = React.useState<IAnswerObject[]>([]);\r\n    const [ score, setScore ] = React.useState(0);\r\n    const [ gameOver, setGameOver ] = React.useState(true);\r\n      \r\n    const history = useHistory();\r\n\r\n    const startTrivia = async () => {\r\n        setLoading(true);\r\n        setGameOver(false);\r\n\r\n        const newQuestions = await fetchSports(\r\n            TOTAL_QUESTIONS,\r\n            Difficulty.EASY\r\n        );\r\n\r\n        setQuestions(newQuestions);\r\n        setScore(0);\r\n        setUserAnswers([]);\r\n        setNumber(0);\r\n        setLoading(false);\r\n    }\r\n\r\n    const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\r\n        if (!gameOver) {\r\n            const answer = e.currentTarget.value;\r\n            //check anwer against correct asswer\r\n            const correct = questions[number].correct_answer === answer;\r\n            if (correct) setScore(prev => prev + 1)\r\n            //save answer in the array for the user answers\r\n            const answerObject = {\r\n                question: questions[number].question,\r\n                answer,\r\n                correct,\r\n                correctAnswer: questions[number].correct_answer\r\n            };\r\n            setUserAnswers((prev) => [...prev, answerObject])\r\n        }\r\n    }\r\n\r\n    const nextQuestion = () => {\r\n        const nextQuestion = number + 1;\r\n        //if we are on the last question\r\n        if (nextQuestion === TOTAL_QUESTIONS) {\r\n            //game is over\r\n            setGameOver(true);\r\n        } else {\r\n            setNumber(nextQuestion);\r\n        }\r\n    }\r\n\r\n    return (\r\n       \r\n            <div className=\"container\">\r\n                { gameOver || userAnswers.length === TOTAL_QUESTIONS ? (\r\n                <button className=\"start\" onClick={startTrivia}>Start</button>\r\n                ) : null }\r\n                \r\n                { !gameOver ? <p className=\"score\">Score: {score} </p> : null }\r\n                { loading && <p>Loading Questions ...</p> } \r\n                { !loading && !gameOver && (\r\n                    <QuestionCard \r\n                    questionNum={number + 1}\r\n                    totalQuestions={TOTAL_QUESTIONS}\r\n                    question={questions[number].question}\r\n                    answers = {questions[number].answers}\r\n                    userAnswer = {userAnswers ? userAnswers[number] : undefined}\r\n                    callback={checkAnswer}\r\n                />\r\n                )}\r\n                {!gameOver && \r\n                !loading && \r\n                userAnswers.length === number + 1 && \r\n                number !== TOTAL_QUESTIONS - 1 ? ( \r\n                <button className=\"next\" onClick={nextQuestion}>\r\n                    Next Question\r\n                </button>\r\n                ) : null}\r\n               \r\n            <div className=\"back-button\">\r\n                <button onClick={() => history.goBack()}>Home Page</button>\r\n            </div> \r\n        </div>\r\n    );\r\n};\r\n\r\n\r\n\r\n","import * as React from 'react';\r\nimport styled from 'styled-components';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { QuestionCard } from './QuestionCard';\r\nimport { fetchComputers } from '../API';\r\n//types\r\nimport { QuestionsState, Difficulty } from '../API';\r\n\r\nconst TOTAL_QUESTIONS = 10;\r\n\r\nexport interface IAnswerObject {\r\n    question: string;\r\n    answer: string;\r\n    correct: boolean;\r\n    correctAnswer: string;\r\n}\r\n\r\nexport const Computers = () => {\r\n    const [ loading, setLoading ] = React.useState(false);\r\n    const [ questions, setQuestions ] = React.useState<QuestionsState[]>([]);\r\n    const [ number, setNumber ] = React.useState(0);\r\n    const [ userAnswers, setUserAnswers ] = React.useState<IAnswerObject[]>([]);\r\n    const [ score, setScore ] = React.useState(0);\r\n    const [ gameOver, setGameOver ] = React.useState(true);\r\n      \r\n    const history = useHistory();\r\n\r\n    const startTrivia = async () => {\r\n        setLoading(true);\r\n        setGameOver(false);\r\n\r\n        const newQuestions = await fetchComputers(\r\n            TOTAL_QUESTIONS,\r\n            Difficulty.EASY\r\n        );\r\n\r\n        setQuestions(newQuestions);\r\n        setScore(0);\r\n        setUserAnswers([]);\r\n        setNumber(0);\r\n        setLoading(false);\r\n    }\r\n\r\n    const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\r\n        if (!gameOver) {\r\n            const answer = e.currentTarget.value;\r\n            //check anwer against correct asswer\r\n            const correct = questions[number].correct_answer === answer;\r\n            if (correct) setScore(prev => prev + 1)\r\n            //save answer in the array for the user answers\r\n            const answerObject = {\r\n                question: questions[number].question,\r\n                answer,\r\n                correct,\r\n                correctAnswer: questions[number].correct_answer\r\n            };\r\n            setUserAnswers((prev) => [...prev, answerObject])\r\n        }\r\n    }\r\n\r\n    const nextQuestion = () => {\r\n        const nextQuestion = number + 1;\r\n        //if we are on the last question\r\n        if (nextQuestion === TOTAL_QUESTIONS) {\r\n            //game is over\r\n            setGameOver(true);\r\n        } else {\r\n            setNumber(nextQuestion);\r\n        }\r\n    }\r\n\r\n    return (\r\n            <div className=\"container\">\r\n                { gameOver || userAnswers.length === TOTAL_QUESTIONS ? (\r\n                <button className=\"start\" onClick={startTrivia}>Start</button>\r\n                ) : null }\r\n                \r\n                { !gameOver ? <p className=\"score\">Score: {score} </p> : null }\r\n                { loading && <p>Loading Questions ...</p> }\r\n                { !loading && !gameOver && (\r\n                    <QuestionCard \r\n                    questionNum={number + 1}\r\n                    totalQuestions={TOTAL_QUESTIONS}\r\n                    question={questions[number].question}\r\n                    answers = {questions[number].answers}\r\n                    userAnswer = {userAnswers ? userAnswers[number] : undefined}\r\n                    callback={checkAnswer}\r\n                />\r\n                )}\r\n                {!gameOver && \r\n                !loading && \r\n                userAnswers.length === number + 1 && \r\n                number !== TOTAL_QUESTIONS - 1 ? ( \r\n                <button className=\"next\" onClick={nextQuestion}>\r\n                    Next Question\r\n                </button>\r\n                ) : null}\r\n               \r\n            <div className=\"back-button\">\r\n                <button onClick={() => history.goBack()}>Home Page</button>\r\n            </div> \r\n        </div>\r\n    );\r\n};","import * as React from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\nimport { Routes } from '../App';\r\n\r\nexport const HomePage = () => {\r\n   const history = useHistory();\r\n      \r\n    return (\r\n        <StyleWrapper>\r\n            <div className=\"container\">\r\n                <div className=\"row title\">\r\n                    <h1><span>Q</span>uiz</h1>\r\n                </div>\r\n                <div className=\"row sub-title\">\r\n                    Choose Your Category From Below \r\n                </div>\r\n                <div className=\"choices\">\r\n                    <button className=\"books-button\" type=\"button\" onClick={() => history.push(Routes.Books)}>Books</button>\r\n                    <button className=\"computers-button\" type=\"button\" onClick={() => history.push(Routes.Computers)}>Computers</button>\r\n                    <button className=\"movies-button\" type=\"button\" onClick={() => history.push(Routes.Movies)}>Movies</button>\r\n                    <button className=\"sports-button\" type=\"button\" onClick={() => history.push(Routes.Sports)}>Sports</button>\r\n                </div>\r\n            </div>\r\n        </StyleWrapper> \r\n    );\r\n};\r\n\r\nconst StyleWrapper = styled.div`\r\n.container {\r\n    .choices {\r\n      display: flex;\r\n      flex-wrap: wrap;\r\n      margin: 3rem auto 3rem;\r\n      width: 500px;\r\n\r\n      button {\r\n        flex: 1 0 45%;\r\n        width: 200px;\r\n        height: 80px;\r\n        border-radius: 5px;\r\n        cursor: pointer;\r\n        border: none;\r\n        margin: .4rem;\r\n        outline: none;\r\n        user-select: none;\r\n        font-weight: 600;\r\n\r\n        &:hover {\r\n          background: #D6D3D2;\r\n          transition: .5s;\r\n        }\r\n        &:active {\r\n          transform: scale(.9);\r\n          transition: transform .1s;\r\n        }\r\n      \r\n        p {\r\n          font-size: 1.3rem;\r\n          margin: 0;\r\n        }\r\n      }\r\n    }\r\n    h1 {\r\n        text-transform: uppercase;\r\n        font-size: 3rem;\r\n\r\n    span, i {\r\n        color: #ffa502;\r\n      }\r\n    }\r\n    .title {\r\n        text-transform: uppercase;\r\n        font-size: 3rem;\r\n    }\r\n   \r\n    .celebrities {\r\n        margin: 0 0 0 60px;\r\n    }\r\n    .books-button {\r\n        background-color: #4CAF50; /* Green */\r\n        border: none;\r\n        color: white;\r\n        padding: 15px 32px;\r\n        text-align: center;\r\n        text-decoration: none;\r\n        display: inline-block;\r\n        font-size: 16px;\r\n    }\r\n    .computers-button {\r\n        background-color: #e65727; /* Orange */\r\n        border: none;\r\n        color: white;\r\n        padding: 15px 32px;\r\n        text-align: center;\r\n        text-decoration: none;\r\n        display: inline-block;\r\n        font-size: 16px; \r\n    }\r\n    .movies-button {\r\n        background-color: #21b3db; /* Blue */\r\n        border: none;\r\n        color: white;\r\n        padding: 15px 32px;\r\n        text-align: center;\r\n        text-decoration: none;\r\n        display: inline-block;\r\n        font-size: 16px;\r\n    }\r\n    .sports-button {\r\n        background-color: #8f2b86; /* Purple */\r\n        border: none;\r\n        color: white;\r\n        padding: 15px 32px;\r\n        text-align: center;\r\n        text-decoration: none;\r\n        display: inline-block;\r\n        font-size: 16px;\r\n    }\r\n`;\r\n\r\n","import React from 'react';\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport './App.css';\nimport { Books } from './components/Books';\nimport { Movies } from './components/Movies';\nimport { Sports } from './components/Sports';\nimport { Computers } from './components/Computers';\nimport { HomePage } from './components/HomePage';\n\nexport enum Routes {\n  Books =\"/Books\",\n  Movies = \"/Movies\",\n  Sports = \"/Sports\",\n  Computers = \"/Computers\",\n}\n\nexport const App = () => { \n  return (\n    <BrowserRouter>\n      <div className=\"App\">\n        <Route exact path=\"/\" component={HomePage} />\n        <Route path={Routes.Sports} component={Sports} />\n        <Route path={Routes.Books} component={Books} />\n        <Route path={Routes.Movies} component={Movies} />\n        <Route path={Routes.Computers} component={Computers} />\n      </div>\n    </BrowserRouter>\n  );\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}